{"version":3,"sources":["actions/actions.js","App.js","serviceWorker.js","reducer/rootReducer.js","index.js"],"names":["GET_SUBS","fetchPosts","dispatch","fetch","then","response","json","type","posts","data","children","map","child","getSubs","App","className","href","onClick","this","props","onGetSubs","Array","from","post","i","key","title","Component","connect","state","Boolean","window","location","hostname","match","initialState","store","createStore","action","applyMiddleware","reduxThunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+RAAaA,G,MAAW,YAUjB,SAASC,IACZ,OAAO,SAAAC,GACL,OAAOC,MAAM,kDACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIJ,EAZf,SAAiBI,GACpB,MAAO,CACHC,KAAMP,EACNQ,MAAOF,EAAKG,KAAKC,SAASC,KAAI,SAAAC,GAAK,OAAIA,EAAMH,SAStBI,CAAQP,Q,ICTjCQ,E,iLAIF,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,cACb,wBAAIA,UAAU,UAAd,4DAAgF,uBAAGA,UAAU,eAAeC,KAAK,sBAAjC,WAChF,4BAAQD,UAAU,SAASE,QAASC,KAAKC,MAAMC,WAA/C,kBACA,wBAAIL,UAAU,aACXM,MAAMC,KAAKJ,KAAKC,MAAMX,OAAOG,KAAI,SAACY,EAAMC,GAAP,OAChC,wBAAIT,UAAU,kBAAkBU,IAAKD,GAAID,EAAKG,iB,GAX1CC,aAgCHC,mBAZf,SAAyBC,GACvB,MAAO,CACLrB,MAAOqB,EAAMrB,UAIjB,SAA4BN,GAC1B,MAAO,CACLkB,UAAW,kBAAMlB,EAASD,SAIf2B,CAA6Cd,GCzBxCgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBAC,EAAe,CACjB3B,MAAO,I,YCOL4B,EAAQC,aDJC,WAAqD,IAA/BR,EAA8B,uDAAtBM,EAAcG,EAAQ,uCAC/D,OAAQA,EAAO/B,MACX,KAAKP,EACD,MAAO,CACHQ,MAAO8B,EAAO9B,OAEtB,QACI,OAAOqB,KCHoBU,YAAgBC,MAEjDC,EACF,kBAAC,IAAD,CAAUL,MAAOA,GACb,kBAAC,EAAD,OAKRM,IAASC,OAAOF,EAAKG,SAASC,eAAe,SFgHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.0b2f2e36.chunk.js","sourcesContent":["export const GET_SUBS = 'GET_SUBS'\r\n\r\nexport function getSubs(json) {\r\n    return {\r\n        type: GET_SUBS,\r\n        posts: json.data.children.map(child => child.data)\r\n    }\r\n}\r\n\r\n\r\nexport function fetchPosts() {\r\n    return dispatch => {\r\n      return fetch('https://www.reddit.com/subreddits/popular.json')\r\n        .then(response => response.json())\r\n        .then(json => dispatch(getSubs(json)))\r\n    }\r\n  }\r\n\r\n\r\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport './App.scss'\nimport {fetchPosts} from './actions/actions'\n\nclass App extends Component {\n\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App__inner\">\n          <h1 className=\"Header\">Click the button to see the most popular Subreddits from <a className=\"Header__link\" href=\"https://reddit.com\">Reddit</a></h1>\n          <button className=\"Button\" onClick={this.props.onGetSubs}>Get Subreddits</button>\n          <ul className=\"Subs-list\">\n            {Array.from(this.props.posts).map((post, i) => (\n              <li className=\"Subs-list__item\" key={i}>{post.title}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    posts: state.posts\n  }\n}\n\nfunction mapDispatchToProps(dispatch){\n  return {\n    onGetSubs: () => dispatch(fetchPosts())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {GET_SUBS} from '../actions/actions'\r\n\r\nconst initialState = {\r\n    posts: []\r\n} \r\n\r\nexport default function rootReducer (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_SUBS:\r\n            return {\r\n                posts: action.posts\r\n            }\r\n        default:\r\n            return state\r\n\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware} from 'redux'\nimport {Provider} from 'react-redux'\nimport rootReducer from './reducer/rootReducer'\nimport reduxThunk from 'redux-thunk'\n \nconst store = createStore(rootReducer, applyMiddleware(reduxThunk))\n\nconst app = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n)\n\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}